
liquidcrystal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000858  000008ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000858  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080011a  0080011a  00000906  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005baf  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001363  00000000  00000000  0000683f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018f7  00000000  00000000  00007ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000092c  00000000  00000000  0000949c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a82  00000000  00000000  00009dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004297  00000000  00000000  0000b84a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0000fae1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_16>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	a8 00       	.word	0x00a8	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	11 e0       	ldi	r17, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	e8 e5       	ldi	r30, 0x58	; 88
  ce:	f8 e0       	ldi	r31, 0x08	; 8
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
  d2:	05 90       	lpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	aa 31       	cpi	r26, 0x1A	; 26
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	aa e1       	ldi	r26, 0x1A	; 26
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	ab 33       	cpi	r26, 0x3B	; 59
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	cd e5       	ldi	r28, 0x5D	; 93
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
  f4:	21 97       	sbiw	r28, 0x01	; 1
  f6:	fe 01       	movw	r30, r28
  f8:	0e 94 24 04 	call	0x848	; 0x848 <__tablejump2__>
  fc:	cc 35       	cpi	r28, 0x5C	; 92
  fe:	d1 07       	cpc	r29, r17
 100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
 102:	0e 94 bc 00 	call	0x178	; 0x178 <main>
 106:	0c 94 2a 04 	jmp	0x854	; 0x854 <_exit>

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <setup>:
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

void setup() {
  // set up the LCD's number of columns and rows:
  lcd.begin(16, 2);
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	42 e0       	ldi	r20, 0x02	; 2
 112:	60 e1       	ldi	r22, 0x10	; 16
 114:	8a e1       	ldi	r24, 0x1A	; 26
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN13LiquidCrystal5beginEhhh>
  // Print a message to the LCD.
  lcd.print("hello, world!");
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	71 e0       	ldi	r23, 0x01	; 1
 120:	8a e1       	ldi	r24, 0x1A	; 26
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_ZN5Print5printEPKc>

00000128 <loop>:
}

void loop() {
  // Turn off the blinking cursor:
  lcd.noBlink();
 128:	8a e1       	ldi	r24, 0x1A	; 26
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_ZN13LiquidCrystal7noBlinkEv>
  delay(3000);
 130:	68 eb       	ldi	r22, 0xB8	; 184
 132:	7b e0       	ldi	r23, 0x0B	; 11
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 80 01 	call	0x300	; 0x300 <delay>
  // Turn on the blinking cursor:
  lcd.blink();
 13c:	8a e1       	ldi	r24, 0x1A	; 26
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 80 03 	call	0x700	; 0x700 <_ZN13LiquidCrystal5blinkEv>
  delay(3000);
 144:	68 eb       	ldi	r22, 0xB8	; 184
 146:	7b e0       	ldi	r23, 0x0B	; 11
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0c 94 80 01 	jmp	0x300	; 0x300 <delay>

00000150 <_GLOBAL__sub_I_lcd>:
}
 150:	cf 92       	push	r12
 152:	ef 92       	push	r14
 154:	0f 93       	push	r16


// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	c8 2e       	mov	r12, r24
 15a:	93 e0       	ldi	r25, 0x03	; 3
 15c:	e9 2e       	mov	r14, r25
 15e:	04 e0       	ldi	r16, 0x04	; 4
 160:	25 e0       	ldi	r18, 0x05	; 5
 162:	4b e0       	ldi	r20, 0x0B	; 11
 164:	6c e0       	ldi	r22, 0x0C	; 12
 166:	8a e1       	ldi	r24, 0x1A	; 26
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN13LiquidCrystalC1Ehhhhhh>
  lcd.noBlink();
  delay(3000);
  // Turn on the blinking cursor:
  lcd.blink();
  delay(3000);
}
 16e:	0f 91       	pop	r16
 170:	ef 90       	pop	r14
 172:	cf 90       	pop	r12
 174:	08 95       	ret

00000176 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 176:	08 95       	ret

00000178 <main>:

int main(void)
{
	init();
 178:	0e 94 c7 01 	call	0x38e	; 0x38e <init>

	initVariant();
 17c:	0e 94 bb 00 	call	0x176	; 0x176 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 180:	0e 94 87 00 	call	0x10e	; 0x10e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 184:	c0 e0       	ldi	r28, 0x00	; 0
 186:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 188:	0e 94 94 00 	call	0x128	; 0x128 <loop>
		if (serialEventRun) serialEventRun();
 18c:	20 97       	sbiw	r28, 0x00	; 0
 18e:	e1 f3       	breq	.-8      	; 0x188 <main+0x10>
 190:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 194:	f9 cf       	rjmp	.-14     	; 0x188 <main+0x10>

00000196 <_ZN5Print17availableForWriteEv>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	08 95       	ret

0000019c <_ZN5Print5flushEv>:
 19c:	08 95       	ret

0000019e <_ZN5Print5writeEPKhj>:
 19e:	cf 92       	push	r12
 1a0:	df 92       	push	r13
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	6c 01       	movw	r12, r24
 1b0:	7a 01       	movw	r14, r20
 1b2:	8b 01       	movw	r16, r22
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
 1b8:	ce 15       	cp	r28, r14
 1ba:	df 05       	cpc	r29, r15
 1bc:	89 f0       	breq	.+34     	; 0x1e0 <_ZN5Print5writeEPKhj+0x42>
 1be:	d8 01       	movw	r26, r16
 1c0:	6d 91       	ld	r22, X+
 1c2:	8d 01       	movw	r16, r26
 1c4:	d6 01       	movw	r26, r12
 1c6:	ed 91       	ld	r30, X+
 1c8:	fc 91       	ld	r31, X
 1ca:	01 90       	ld	r0, Z+
 1cc:	f0 81       	ld	r31, Z
 1ce:	e0 2d       	mov	r30, r0
 1d0:	c6 01       	movw	r24, r12
 1d2:	09 95       	icall
 1d4:	89 2b       	or	r24, r25
 1d6:	11 f4       	brne	.+4      	; 0x1dc <_ZN5Print5writeEPKhj+0x3e>
 1d8:	7e 01       	movw	r14, r28
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <_ZN5Print5writeEPKhj+0x42>
 1dc:	21 96       	adiw	r28, 0x01	; 1
 1de:	ec cf       	rjmp	.-40     	; 0x1b8 <_ZN5Print5writeEPKhj+0x1a>
 1e0:	c7 01       	movw	r24, r14
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	df 90       	pop	r13
 1f0:	cf 90       	pop	r12
 1f2:	08 95       	ret

000001f4 <_ZN5Print5writeEPKc>:
 1f4:	61 15       	cp	r22, r1
 1f6:	71 05       	cpc	r23, r1
 1f8:	79 f0       	breq	.+30     	; 0x218 <_ZN5Print5writeEPKc+0x24>
 1fa:	fb 01       	movw	r30, r22
 1fc:	01 90       	ld	r0, Z+
 1fe:	00 20       	and	r0, r0
 200:	e9 f7       	brne	.-6      	; 0x1fc <_ZN5Print5writeEPKc+0x8>
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	af 01       	movw	r20, r30
 206:	46 1b       	sub	r20, r22
 208:	57 0b       	sbc	r21, r23
 20a:	dc 01       	movw	r26, r24
 20c:	ed 91       	ld	r30, X+
 20e:	fc 91       	ld	r31, X
 210:	02 80       	ldd	r0, Z+2	; 0x02
 212:	f3 81       	ldd	r31, Z+3	; 0x03
 214:	e0 2d       	mov	r30, r0
 216:	09 94       	ijmp
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	08 95       	ret

0000021e <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 21e:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_ZN5Print5writeEPKc>

00000222 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	2f 93       	push	r18
 22e:	3f 93       	push	r19
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
 238:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <timer0_millis>
 23c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <timer0_millis+0x1>
 240:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <timer0_millis+0x2>
 244:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <timer0_millis+0x3>
 248:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <timer0_fract>
 24c:	23 e0       	ldi	r18, 0x03	; 3
 24e:	23 0f       	add	r18, r19
 250:	2d 37       	cpi	r18, 0x7D	; 125
 252:	20 f4       	brcc	.+8      	; 0x25c <__vector_16+0x3a>
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	a1 1d       	adc	r26, r1
 258:	b1 1d       	adc	r27, r1
 25a:	05 c0       	rjmp	.+10     	; 0x266 <__vector_16+0x44>
 25c:	26 e8       	ldi	r18, 0x86	; 134
 25e:	23 0f       	add	r18, r19
 260:	02 96       	adiw	r24, 0x02	; 2
 262:	a1 1d       	adc	r26, r1
 264:	b1 1d       	adc	r27, r1
 266:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <timer0_fract>
 26a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <timer0_millis>
 26e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <timer0_millis+0x1>
 272:	a0 93 35 01 	sts	0x0135, r26	; 0x800135 <timer0_millis+0x2>
 276:	b0 93 36 01 	sts	0x0136, r27	; 0x800136 <timer0_millis+0x3>
 27a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <timer0_overflow_count>
 27e:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <timer0_overflow_count+0x1>
 282:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <timer0_overflow_count+0x2>
 286:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <timer0_overflow_count+0x3>
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	a1 1d       	adc	r26, r1
 28e:	b1 1d       	adc	r27, r1
 290:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <timer0_overflow_count>
 294:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <timer0_overflow_count+0x1>
 298:	a0 93 39 01 	sts	0x0139, r26	; 0x800139 <timer0_overflow_count+0x2>
 29c:	b0 93 3a 01 	sts	0x013A, r27	; 0x80013a <timer0_overflow_count+0x3>
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 2b6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 2b8:	f8 94       	cli
	m = timer0_overflow_count;
 2ba:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <timer0_overflow_count>
 2be:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <timer0_overflow_count+0x1>
 2c2:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <timer0_overflow_count+0x2>
 2c6:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 2ca:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 2cc:	a8 9b       	sbis	0x15, 0	; 21
 2ce:	05 c0       	rjmp	.+10     	; 0x2da <micros+0x24>
 2d0:	2f 3f       	cpi	r18, 0xFF	; 255
 2d2:	19 f0       	breq	.+6      	; 0x2da <micros+0x24>
		m++;
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	a1 1d       	adc	r26, r1
 2d8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 2da:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 2dc:	ba 2f       	mov	r27, r26
 2de:	a9 2f       	mov	r26, r25
 2e0:	98 2f       	mov	r25, r24
 2e2:	88 27       	eor	r24, r24
 2e4:	82 0f       	add	r24, r18
 2e6:	91 1d       	adc	r25, r1
 2e8:	a1 1d       	adc	r26, r1
 2ea:	b1 1d       	adc	r27, r1
 2ec:	bc 01       	movw	r22, r24
 2ee:	cd 01       	movw	r24, r26
 2f0:	42 e0       	ldi	r20, 0x02	; 2
 2f2:	66 0f       	add	r22, r22
 2f4:	77 1f       	adc	r23, r23
 2f6:	88 1f       	adc	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	4a 95       	dec	r20
 2fc:	d1 f7       	brne	.-12     	; 0x2f2 <micros+0x3c>
}
 2fe:	08 95       	ret

00000300 <delay>:

void delay(unsigned long ms)
{
 300:	8f 92       	push	r8
 302:	9f 92       	push	r9
 304:	af 92       	push	r10
 306:	bf 92       	push	r11
 308:	cf 92       	push	r12
 30a:	df 92       	push	r13
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	6b 01       	movw	r12, r22
 312:	7c 01       	movw	r14, r24
	uint32_t start = micros();
 314:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <micros>
 318:	4b 01       	movw	r8, r22
 31a:	5c 01       	movw	r10, r24

	while (ms > 0) {
 31c:	c1 14       	cp	r12, r1
 31e:	d1 04       	cpc	r13, r1
 320:	e1 04       	cpc	r14, r1
 322:	f1 04       	cpc	r15, r1
 324:	01 f1       	breq	.+64     	; 0x366 <delay+0x66>
		yield();
 326:	0e 94 8e 03 	call	0x71c	; 0x71c <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
 32a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <micros>
 32e:	dc 01       	movw	r26, r24
 330:	cb 01       	movw	r24, r22
 332:	88 19       	sub	r24, r8
 334:	99 09       	sbc	r25, r9
 336:	aa 09       	sbc	r26, r10
 338:	bb 09       	sbc	r27, r11
 33a:	88 3e       	cpi	r24, 0xE8	; 232
 33c:	93 40       	sbci	r25, 0x03	; 3
 33e:	a1 05       	cpc	r26, r1
 340:	b1 05       	cpc	r27, r1
 342:	60 f3       	brcs	.-40     	; 0x31c <delay+0x1c>
			ms--;
 344:	21 e0       	ldi	r18, 0x01	; 1
 346:	c2 1a       	sub	r12, r18
 348:	d1 08       	sbc	r13, r1
 34a:	e1 08       	sbc	r14, r1
 34c:	f1 08       	sbc	r15, r1
			start += 1000;
 34e:	88 ee       	ldi	r24, 0xE8	; 232
 350:	88 0e       	add	r8, r24
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	98 1e       	adc	r9, r24
 356:	a1 1c       	adc	r10, r1
 358:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 35a:	c1 14       	cp	r12, r1
 35c:	d1 04       	cpc	r13, r1
 35e:	e1 04       	cpc	r14, r1
 360:	f1 04       	cpc	r15, r1
 362:	19 f7       	brne	.-58     	; 0x32a <delay+0x2a>
 364:	db cf       	rjmp	.-74     	; 0x31c <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
 366:	ff 90       	pop	r15
 368:	ef 90       	pop	r14
 36a:	df 90       	pop	r13
 36c:	cf 90       	pop	r12
 36e:	bf 90       	pop	r11
 370:	af 90       	pop	r10
 372:	9f 90       	pop	r9
 374:	8f 90       	pop	r8
 376:	08 95       	ret

00000378 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	91 05       	cpc	r25, r1
 37c:	38 f0       	brcs	.+14     	; 0x38c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
 386:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <delayMicroseconds+0x10>
 38c:	08 95       	ret

0000038e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 38e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 390:	84 b5       	in	r24, 0x24	; 36
 392:	82 60       	ori	r24, 0x02	; 2
 394:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 396:	84 b5       	in	r24, 0x24	; 36
 398:	81 60       	ori	r24, 0x01	; 1
 39a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 39c:	85 b5       	in	r24, 0x25	; 37
 39e:	82 60       	ori	r24, 0x02	; 2
 3a0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 3a2:	85 b5       	in	r24, 0x25	; 37
 3a4:	81 60       	ori	r24, 0x01	; 1
 3a6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 3a8:	ee e6       	ldi	r30, 0x6E	; 110
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	81 60       	ori	r24, 0x01	; 1
 3b0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 3b2:	e1 e8       	ldi	r30, 0x81	; 129
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 3b8:	80 81       	ld	r24, Z
 3ba:	82 60       	ori	r24, 0x02	; 2
 3bc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 3be:	80 81       	ld	r24, Z
 3c0:	81 60       	ori	r24, 0x01	; 1
 3c2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 3c4:	e0 e8       	ldi	r30, 0x80	; 128
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	81 60       	ori	r24, 0x01	; 1
 3cc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 3ce:	e1 eb       	ldi	r30, 0xB1	; 177
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	84 60       	ori	r24, 0x04	; 4
 3d6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 3d8:	e0 eb       	ldi	r30, 0xB0	; 176
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	81 60       	ori	r24, 0x01	; 1
 3e0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 3e2:	ea e7       	ldi	r30, 0x7A	; 122
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	84 60       	ori	r24, 0x04	; 4
 3ea:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 3ec:	80 81       	ld	r24, Z
 3ee:	82 60       	ori	r24, 0x02	; 2
 3f0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 3f2:	80 81       	ld	r24, Z
 3f4:	81 60       	ori	r24, 0x01	; 1
 3f6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 3f8:	80 81       	ld	r24, Z
 3fa:	80 68       	ori	r24, 0x80	; 128
 3fc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 3fe:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 402:	08 95       	ret

00000404 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	ec 01       	movw	r28, r24
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	8e 81       	ldd	r24, Y+6	; 0x06
 40e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <digitalWrite>
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 bc 01 	call	0x378	; 0x378 <delayMicroseconds>
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	8e 81       	ldd	r24, Y+6	; 0x06
 41e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <digitalWrite>
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 bc 01 	call	0x378	; 0x378 <delayMicroseconds>
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	8e 81       	ldd	r24, Y+6	; 0x06
 42e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <digitalWrite>
 432:	84 e6       	ldi	r24, 0x64	; 100
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	0c 94 bc 01 	jmp	0x378	; 0x378 <delayMicroseconds>

0000043e <_ZN13LiquidCrystal10write4bitsEh>:
 43e:	cf 92       	push	r12
 440:	df 92       	push	r13
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	7c 01       	movw	r14, r24
 450:	6c 01       	movw	r12, r24
 452:	87 e0       	ldi	r24, 0x07	; 7
 454:	c8 0e       	add	r12, r24
 456:	d1 1c       	adc	r13, r1
 458:	c0 e0       	ldi	r28, 0x00	; 0
 45a:	d0 e0       	ldi	r29, 0x00	; 0
 45c:	06 2f       	mov	r16, r22
 45e:	10 e0       	ldi	r17, 0x00	; 0
 460:	b8 01       	movw	r22, r16
 462:	0c 2e       	mov	r0, r28
 464:	02 c0       	rjmp	.+4      	; 0x46a <_ZN13LiquidCrystal10write4bitsEh+0x2c>
 466:	75 95       	asr	r23
 468:	67 95       	ror	r22
 46a:	0a 94       	dec	r0
 46c:	e2 f7       	brpl	.-8      	; 0x466 <_ZN13LiquidCrystal10write4bitsEh+0x28>
 46e:	61 70       	andi	r22, 0x01	; 1
 470:	f6 01       	movw	r30, r12
 472:	81 91       	ld	r24, Z+
 474:	6f 01       	movw	r12, r30
 476:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <digitalWrite>
 47a:	21 96       	adiw	r28, 0x01	; 1
 47c:	c4 30       	cpi	r28, 0x04	; 4
 47e:	d1 05       	cpc	r29, r1
 480:	79 f7       	brne	.-34     	; 0x460 <_ZN13LiquidCrystal10write4bitsEh+0x22>
 482:	c7 01       	movw	r24, r14
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	1f 91       	pop	r17
 48a:	0f 91       	pop	r16
 48c:	ff 90       	pop	r15
 48e:	ef 90       	pop	r14
 490:	df 90       	pop	r13
 492:	cf 90       	pop	r12
 494:	0c 94 02 02 	jmp	0x404	; 0x404 <_ZN13LiquidCrystal11pulseEnableEv>

00000498 <_ZN13LiquidCrystal10write8bitsEh>:
 498:	cf 92       	push	r12
 49a:	df 92       	push	r13
 49c:	ef 92       	push	r14
 49e:	ff 92       	push	r15
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	7c 01       	movw	r14, r24
 4aa:	6c 01       	movw	r12, r24
 4ac:	87 e0       	ldi	r24, 0x07	; 7
 4ae:	c8 0e       	add	r12, r24
 4b0:	d1 1c       	adc	r13, r1
 4b2:	c0 e0       	ldi	r28, 0x00	; 0
 4b4:	d0 e0       	ldi	r29, 0x00	; 0
 4b6:	06 2f       	mov	r16, r22
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	b8 01       	movw	r22, r16
 4bc:	0c 2e       	mov	r0, r28
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
 4c0:	75 95       	asr	r23
 4c2:	67 95       	ror	r22
 4c4:	0a 94       	dec	r0
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <_ZN13LiquidCrystal10write8bitsEh+0x28>
 4c8:	61 70       	andi	r22, 0x01	; 1
 4ca:	f6 01       	movw	r30, r12
 4cc:	81 91       	ld	r24, Z+
 4ce:	6f 01       	movw	r12, r30
 4d0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <digitalWrite>
 4d4:	21 96       	adiw	r28, 0x01	; 1
 4d6:	c8 30       	cpi	r28, 0x08	; 8
 4d8:	d1 05       	cpc	r29, r1
 4da:	79 f7       	brne	.-34     	; 0x4ba <_ZN13LiquidCrystal10write8bitsEh+0x22>
 4dc:	c7 01       	movw	r24, r14
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	1f 91       	pop	r17
 4e4:	0f 91       	pop	r16
 4e6:	ff 90       	pop	r15
 4e8:	ef 90       	pop	r14
 4ea:	df 90       	pop	r13
 4ec:	cf 90       	pop	r12
 4ee:	0c 94 02 02 	jmp	0x404	; 0x404 <_ZN13LiquidCrystal11pulseEnableEv>

000004f2 <_ZN13LiquidCrystal4sendEhh>:
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	ec 01       	movw	r28, r24
 4fa:	16 2f       	mov	r17, r22
 4fc:	64 2f       	mov	r22, r20
 4fe:	8c 81       	ldd	r24, Y+4	; 0x04
 500:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <digitalWrite>
 504:	8d 81       	ldd	r24, Y+5	; 0x05
 506:	8f 3f       	cpi	r24, 0xFF	; 255
 508:	19 f0       	breq	.+6      	; 0x510 <_ZN13LiquidCrystal4sendEhh+0x1e>
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <digitalWrite>
 510:	8f 85       	ldd	r24, Y+15	; 0x0f
 512:	61 2f       	mov	r22, r17
 514:	84 ff       	sbrs	r24, 4
 516:	06 c0       	rjmp	.+12     	; 0x524 <_ZN13LiquidCrystal4sendEhh+0x32>
 518:	ce 01       	movw	r24, r28
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0c 94 4c 02 	jmp	0x498	; 0x498 <_ZN13LiquidCrystal10write8bitsEh>
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	84 e0       	ldi	r24, 0x04	; 4
 528:	75 95       	asr	r23
 52a:	67 95       	ror	r22
 52c:	8a 95       	dec	r24
 52e:	e1 f7       	brne	.-8      	; 0x528 <_ZN13LiquidCrystal4sendEhh+0x36>
 530:	ce 01       	movw	r24, r28
 532:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN13LiquidCrystal10write4bitsEh>
 536:	61 2f       	mov	r22, r17
 538:	ce 01       	movw	r24, r28
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0c 94 1f 02 	jmp	0x43e	; 0x43e <_ZN13LiquidCrystal10write4bitsEh>

00000544 <_ZN13LiquidCrystal7commandEh>:
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <_ZN13LiquidCrystal4sendEhh>

0000054a <_ZN13LiquidCrystal5clearEv>:
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN13LiquidCrystal7commandEh>
 550:	80 ed       	ldi	r24, 0xD0	; 208
 552:	97 e0       	ldi	r25, 0x07	; 7
 554:	0c 94 bc 01 	jmp	0x378	; 0x378 <delayMicroseconds>

00000558 <_ZN13LiquidCrystal7displayEv>:
 558:	fc 01       	movw	r30, r24
 55a:	60 89       	ldd	r22, Z+16	; 0x10
 55c:	26 2f       	mov	r18, r22
 55e:	24 60       	ori	r18, 0x04	; 4
 560:	20 8b       	std	Z+16, r18	; 0x10
 562:	6c 60       	ori	r22, 0x0C	; 12
 564:	0c 94 a2 02 	jmp	0x544	; 0x544 <_ZN13LiquidCrystal7commandEh>

00000568 <_ZN13LiquidCrystal5beginEhhh>:
 568:	ef 92       	push	r14
 56a:	ff 92       	push	r15
 56c:	0f 93       	push	r16
 56e:	1f 93       	push	r17
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	ec 01       	movw	r28, r24
 576:	42 30       	cpi	r20, 0x02	; 2
 578:	18 f0       	brcs	.+6      	; 0x580 <_ZN13LiquidCrystal5beginEhhh+0x18>
 57a:	8f 85       	ldd	r24, Y+15	; 0x0f
 57c:	88 60       	ori	r24, 0x08	; 8
 57e:	8f 87       	std	Y+15, r24	; 0x0f
 580:	4b 8b       	std	Y+19, r20	; 0x13
 582:	1c 8a       	std	Y+20, r1	; 0x14
 584:	80 e4       	ldi	r24, 0x40	; 64
 586:	8d 8b       	std	Y+21, r24	; 0x15
 588:	6e 8b       	std	Y+22, r22	; 0x16
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	60 5c       	subi	r22, 0xC0	; 192
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	6f 8b       	std	Y+23, r22	; 0x17
 592:	22 23       	and	r18, r18
 594:	29 f0       	breq	.+10     	; 0x5a0 <_ZN13LiquidCrystal5beginEhhh+0x38>
 596:	41 30       	cpi	r20, 0x01	; 1
 598:	19 f4       	brne	.+6      	; 0x5a0 <_ZN13LiquidCrystal5beginEhhh+0x38>
 59a:	8f 85       	ldd	r24, Y+15	; 0x0f
 59c:	84 60       	ori	r24, 0x04	; 4
 59e:	8f 87       	std	Y+15, r24	; 0x0f
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	8c 81       	ldd	r24, Y+4	; 0x04
 5a4:	0e 94 b8 03 	call	0x770	; 0x770 <pinMode>
 5a8:	8d 81       	ldd	r24, Y+5	; 0x05
 5aa:	8f 3f       	cpi	r24, 0xFF	; 255
 5ac:	19 f0       	breq	.+6      	; 0x5b4 <_ZN13LiquidCrystal5beginEhhh+0x4c>
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	0e 94 b8 03 	call	0x770	; 0x770 <pinMode>
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	8e 81       	ldd	r24, Y+6	; 0x06
 5b8:	0e 94 b8 03 	call	0x770	; 0x770 <pinMode>
 5bc:	7e 01       	movw	r14, r28
 5be:	87 e0       	ldi	r24, 0x07	; 7
 5c0:	e8 0e       	add	r14, r24
 5c2:	f1 1c       	adc	r15, r1
 5c4:	00 e0       	ldi	r16, 0x00	; 0
 5c6:	10 e0       	ldi	r17, 0x00	; 0
 5c8:	8f 85       	ldd	r24, Y+15	; 0x0f
 5ca:	84 fd       	sbrc	r24, 4
 5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <_ZN13LiquidCrystal5beginEhhh+0x6c>
 5ce:	84 e0       	ldi	r24, 0x04	; 4
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <_ZN13LiquidCrystal5beginEhhh+0x70>
 5d4:	88 e0       	ldi	r24, 0x08	; 8
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	08 17       	cp	r16, r24
 5da:	19 07       	cpc	r17, r25
 5dc:	4c f4       	brge	.+18     	; 0x5f0 <_ZN13LiquidCrystal5beginEhhh+0x88>
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	f7 01       	movw	r30, r14
 5e2:	81 91       	ld	r24, Z+
 5e4:	7f 01       	movw	r14, r30
 5e6:	0e 94 b8 03 	call	0x770	; 0x770 <pinMode>
 5ea:	0f 5f       	subi	r16, 0xFF	; 255
 5ec:	1f 4f       	sbci	r17, 0xFF	; 255
 5ee:	ec cf       	rjmp	.-40     	; 0x5c8 <_ZN13LiquidCrystal5beginEhhh+0x60>
 5f0:	80 e5       	ldi	r24, 0x50	; 80
 5f2:	93 ec       	ldi	r25, 0xC3	; 195
 5f4:	0e 94 bc 01 	call	0x378	; 0x378 <delayMicroseconds>
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	8c 81       	ldd	r24, Y+4	; 0x04
 5fc:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <digitalWrite>
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	8e 81       	ldd	r24, Y+6	; 0x06
 604:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <digitalWrite>
 608:	8d 81       	ldd	r24, Y+5	; 0x05
 60a:	8f 3f       	cpi	r24, 0xFF	; 255
 60c:	19 f0       	breq	.+6      	; 0x614 <_ZN13LiquidCrystal5beginEhhh+0xac>
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <digitalWrite>
 614:	6f 85       	ldd	r22, Y+15	; 0x0f
 616:	64 fd       	sbrc	r22, 4
 618:	1d c0       	rjmp	.+58     	; 0x654 <_ZN13LiquidCrystal5beginEhhh+0xec>
 61a:	63 e0       	ldi	r22, 0x03	; 3
 61c:	ce 01       	movw	r24, r28
 61e:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN13LiquidCrystal10write4bitsEh>
 622:	84 e9       	ldi	r24, 0x94	; 148
 624:	91 e1       	ldi	r25, 0x11	; 17
 626:	0e 94 bc 01 	call	0x378	; 0x378 <delayMicroseconds>
 62a:	63 e0       	ldi	r22, 0x03	; 3
 62c:	ce 01       	movw	r24, r28
 62e:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN13LiquidCrystal10write4bitsEh>
 632:	84 e9       	ldi	r24, 0x94	; 148
 634:	91 e1       	ldi	r25, 0x11	; 17
 636:	0e 94 bc 01 	call	0x378	; 0x378 <delayMicroseconds>
 63a:	63 e0       	ldi	r22, 0x03	; 3
 63c:	ce 01       	movw	r24, r28
 63e:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN13LiquidCrystal10write4bitsEh>
 642:	86 e9       	ldi	r24, 0x96	; 150
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 bc 01 	call	0x378	; 0x378 <delayMicroseconds>
 64a:	62 e0       	ldi	r22, 0x02	; 2
 64c:	ce 01       	movw	r24, r28
 64e:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN13LiquidCrystal10write4bitsEh>
 652:	16 c0       	rjmp	.+44     	; 0x680 <_ZN13LiquidCrystal5beginEhhh+0x118>
 654:	60 62       	ori	r22, 0x20	; 32
 656:	ce 01       	movw	r24, r28
 658:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN13LiquidCrystal7commandEh>
 65c:	84 e9       	ldi	r24, 0x94	; 148
 65e:	91 e1       	ldi	r25, 0x11	; 17
 660:	0e 94 bc 01 	call	0x378	; 0x378 <delayMicroseconds>
 664:	6f 85       	ldd	r22, Y+15	; 0x0f
 666:	60 62       	ori	r22, 0x20	; 32
 668:	ce 01       	movw	r24, r28
 66a:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN13LiquidCrystal7commandEh>
 66e:	86 e9       	ldi	r24, 0x96	; 150
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 bc 01 	call	0x378	; 0x378 <delayMicroseconds>
 676:	6f 85       	ldd	r22, Y+15	; 0x0f
 678:	60 62       	ori	r22, 0x20	; 32
 67a:	ce 01       	movw	r24, r28
 67c:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN13LiquidCrystal7commandEh>
 680:	6f 85       	ldd	r22, Y+15	; 0x0f
 682:	60 62       	ori	r22, 0x20	; 32
 684:	ce 01       	movw	r24, r28
 686:	0e 94 a2 02 	call	0x544	; 0x544 <_ZN13LiquidCrystal7commandEh>
 68a:	84 e0       	ldi	r24, 0x04	; 4
 68c:	88 8b       	std	Y+16, r24	; 0x10
 68e:	ce 01       	movw	r24, r28
 690:	0e 94 ac 02 	call	0x558	; 0x558 <_ZN13LiquidCrystal7displayEv>
 694:	ce 01       	movw	r24, r28
 696:	0e 94 a5 02 	call	0x54a	; 0x54a <_ZN13LiquidCrystal5clearEv>
 69a:	82 e0       	ldi	r24, 0x02	; 2
 69c:	89 8b       	std	Y+17, r24	; 0x11
 69e:	66 e0       	ldi	r22, 0x06	; 6
 6a0:	ce 01       	movw	r24, r28
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	1f 91       	pop	r17
 6a8:	0f 91       	pop	r16
 6aa:	ff 90       	pop	r15
 6ac:	ef 90       	pop	r14
 6ae:	0c 94 a2 02 	jmp	0x544	; 0x544 <_ZN13LiquidCrystal7commandEh>

000006b2 <_ZN13LiquidCrystalC1Ehhhhhh>:
 6b2:	cf 92       	push	r12
 6b4:	ef 92       	push	r14
 6b6:	0f 93       	push	r16
 6b8:	fc 01       	movw	r30, r24
 6ba:	13 82       	std	Z+3, r1	; 0x03
 6bc:	12 82       	std	Z+2, r1	; 0x02
 6be:	82 e1       	ldi	r24, 0x12	; 18
 6c0:	91 e0       	ldi	r25, 0x01	; 1
 6c2:	91 83       	std	Z+1, r25	; 0x01
 6c4:	80 83       	st	Z, r24
 6c6:	64 83       	std	Z+4, r22	; 0x04
 6c8:	8f ef       	ldi	r24, 0xFF	; 255
 6ca:	85 83       	std	Z+5, r24	; 0x05
 6cc:	46 83       	std	Z+6, r20	; 0x06
 6ce:	27 83       	std	Z+7, r18	; 0x07
 6d0:	00 87       	std	Z+8, r16	; 0x08
 6d2:	e1 86       	std	Z+9, r14	; 0x09
 6d4:	c2 86       	std	Z+10, r12	; 0x0a
 6d6:	13 86       	std	Z+11, r1	; 0x0b
 6d8:	14 86       	std	Z+12, r1	; 0x0c
 6da:	15 86       	std	Z+13, r1	; 0x0d
 6dc:	16 86       	std	Z+14, r1	; 0x0e
 6de:	17 86       	std	Z+15, r1	; 0x0f
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	41 e0       	ldi	r20, 0x01	; 1
 6e4:	60 e1       	ldi	r22, 0x10	; 16
 6e6:	cf 01       	movw	r24, r30
 6e8:	0f 91       	pop	r16
 6ea:	ef 90       	pop	r14
 6ec:	cf 90       	pop	r12
 6ee:	0c 94 b4 02 	jmp	0x568	; 0x568 <_ZN13LiquidCrystal5beginEhhh>

000006f2 <_ZN13LiquidCrystal7noBlinkEv>:
 6f2:	fc 01       	movw	r30, r24
 6f4:	60 89       	ldd	r22, Z+16	; 0x10
 6f6:	6e 7f       	andi	r22, 0xFE	; 254
 6f8:	60 8b       	std	Z+16, r22	; 0x10
 6fa:	68 60       	ori	r22, 0x08	; 8
 6fc:	0c 94 a2 02 	jmp	0x544	; 0x544 <_ZN13LiquidCrystal7commandEh>

00000700 <_ZN13LiquidCrystal5blinkEv>:
 700:	fc 01       	movw	r30, r24
 702:	60 89       	ldd	r22, Z+16	; 0x10
 704:	26 2f       	mov	r18, r22
 706:	21 60       	ori	r18, 0x01	; 1
 708:	20 8b       	std	Z+16, r18	; 0x10
 70a:	69 60       	ori	r22, 0x09	; 9
 70c:	0c 94 a2 02 	jmp	0x544	; 0x544 <_ZN13LiquidCrystal7commandEh>

00000710 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
 710:	41 e0       	ldi	r20, 0x01	; 1
 712:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	08 95       	ret

0000071c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 71c:	08 95       	ret

0000071e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 71e:	83 30       	cpi	r24, 0x03	; 3
 720:	81 f0       	breq	.+32     	; 0x742 <turnOffPWM+0x24>
 722:	28 f4       	brcc	.+10     	; 0x72e <turnOffPWM+0x10>
 724:	81 30       	cpi	r24, 0x01	; 1
 726:	99 f0       	breq	.+38     	; 0x74e <turnOffPWM+0x30>
 728:	82 30       	cpi	r24, 0x02	; 2
 72a:	a1 f0       	breq	.+40     	; 0x754 <turnOffPWM+0x36>
 72c:	08 95       	ret
 72e:	87 30       	cpi	r24, 0x07	; 7
 730:	a9 f0       	breq	.+42     	; 0x75c <turnOffPWM+0x3e>
 732:	88 30       	cpi	r24, 0x08	; 8
 734:	b9 f0       	breq	.+46     	; 0x764 <turnOffPWM+0x46>
 736:	84 30       	cpi	r24, 0x04	; 4
 738:	d1 f4       	brne	.+52     	; 0x76e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 73a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 73e:	8f 7d       	andi	r24, 0xDF	; 223
 740:	03 c0       	rjmp	.+6      	; 0x748 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 742:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 746:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 748:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 74c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 74e:	84 b5       	in	r24, 0x24	; 36
 750:	8f 77       	andi	r24, 0x7F	; 127
 752:	02 c0       	rjmp	.+4      	; 0x758 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 754:	84 b5       	in	r24, 0x24	; 36
 756:	8f 7d       	andi	r24, 0xDF	; 223
 758:	84 bd       	out	0x24, r24	; 36
 75a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 75c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 760:	8f 77       	andi	r24, 0x7F	; 127
 762:	03 c0       	rjmp	.+6      	; 0x76a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 764:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 768:	8f 7d       	andi	r24, 0xDF	; 223
 76a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 76e:	08 95       	ret

00000770 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	fc 01       	movw	r30, r24
 778:	e4 58       	subi	r30, 0x84	; 132
 77a:	ff 4f       	sbci	r31, 0xFF	; 255
 77c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 77e:	fc 01       	movw	r30, r24
 780:	e0 57       	subi	r30, 0x70	; 112
 782:	ff 4f       	sbci	r31, 0xFF	; 255
 784:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 786:	88 23       	and	r24, r24
 788:	61 f1       	breq	.+88     	; 0x7e2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	fc 01       	movw	r30, r24
 792:	e2 55       	subi	r30, 0x52	; 82
 794:	ff 4f       	sbci	r31, 0xFF	; 255
 796:	c5 91       	lpm	r28, Z+
 798:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 79a:	fc 01       	movw	r30, r24
 79c:	ec 55       	subi	r30, 0x5C	; 92
 79e:	ff 4f       	sbci	r31, 0xFF	; 255
 7a0:	a5 91       	lpm	r26, Z+
 7a2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 7a4:	61 11       	cpse	r22, r1
 7a6:	09 c0       	rjmp	.+18     	; 0x7ba <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 7a8:	9f b7       	in	r25, 0x3f	; 63
                cli();
 7aa:	f8 94       	cli
		*reg &= ~bit;
 7ac:	88 81       	ld	r24, Y
 7ae:	20 95       	com	r18
 7b0:	82 23       	and	r24, r18
 7b2:	88 83       	st	Y, r24
		*out &= ~bit;
 7b4:	ec 91       	ld	r30, X
 7b6:	2e 23       	and	r18, r30
 7b8:	0b c0       	rjmp	.+22     	; 0x7d0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 7ba:	62 30       	cpi	r22, 0x02	; 2
 7bc:	61 f4       	brne	.+24     	; 0x7d6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 7be:	9f b7       	in	r25, 0x3f	; 63
                cli();
 7c0:	f8 94       	cli
		*reg &= ~bit;
 7c2:	38 81       	ld	r19, Y
 7c4:	82 2f       	mov	r24, r18
 7c6:	80 95       	com	r24
 7c8:	83 23       	and	r24, r19
 7ca:	88 83       	st	Y, r24
		*out |= bit;
 7cc:	ec 91       	ld	r30, X
 7ce:	2e 2b       	or	r18, r30
 7d0:	2c 93       	st	X, r18
		SREG = oldSREG;
 7d2:	9f bf       	out	0x3f, r25	; 63
 7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 7d6:	8f b7       	in	r24, 0x3f	; 63
                cli();
 7d8:	f8 94       	cli
		*reg |= bit;
 7da:	e8 81       	ld	r30, Y
 7dc:	2e 2b       	or	r18, r30
 7de:	28 83       	st	Y, r18
		SREG = oldSREG;
 7e0:	8f bf       	out	0x3f, r24	; 63
	}
}
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 7e8:	1f 93       	push	r17
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 7ee:	28 2f       	mov	r18, r24
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	f9 01       	movw	r30, r18
 7f4:	e8 59       	subi	r30, 0x98	; 152
 7f6:	ff 4f       	sbci	r31, 0xFF	; 255
 7f8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 7fa:	f9 01       	movw	r30, r18
 7fc:	e4 58       	subi	r30, 0x84	; 132
 7fe:	ff 4f       	sbci	r31, 0xFF	; 255
 800:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 802:	f9 01       	movw	r30, r18
 804:	e0 57       	subi	r30, 0x70	; 112
 806:	ff 4f       	sbci	r31, 0xFF	; 255
 808:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 80a:	cc 23       	and	r28, r28
 80c:	c9 f0       	breq	.+50     	; 0x840 <digitalWrite+0x58>
 80e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 810:	81 11       	cpse	r24, r1
 812:	0e 94 8f 03 	call	0x71e	; 0x71e <turnOffPWM>

	out = portOutputRegister(port);
 816:	ec 2f       	mov	r30, r28
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	ee 0f       	add	r30, r30
 81c:	ff 1f       	adc	r31, r31
 81e:	ec 55       	subi	r30, 0x5C	; 92
 820:	ff 4f       	sbci	r31, 0xFF	; 255
 822:	a5 91       	lpm	r26, Z+
 824:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 826:	8f b7       	in	r24, 0x3f	; 63
	cli();
 828:	f8 94       	cli

	if (val == LOW) {
 82a:	11 11       	cpse	r17, r1
 82c:	05 c0       	rjmp	.+10     	; 0x838 <digitalWrite+0x50>
		*out &= ~bit;
 82e:	9c 91       	ld	r25, X
 830:	ed 2f       	mov	r30, r29
 832:	e0 95       	com	r30
 834:	e9 23       	and	r30, r25
 836:	02 c0       	rjmp	.+4      	; 0x83c <digitalWrite+0x54>
	} else {
		*out |= bit;
 838:	ec 91       	ld	r30, X
 83a:	ed 2b       	or	r30, r29
 83c:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 83e:	8f bf       	out	0x3f, r24	; 63
}
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	1f 91       	pop	r17
 846:	08 95       	ret

00000848 <__tablejump2__>:
 848:	ee 0f       	add	r30, r30
 84a:	ff 1f       	adc	r31, r31
 84c:	05 90       	lpm	r0, Z+
 84e:	f4 91       	lpm	r31, Z
 850:	e0 2d       	mov	r30, r0
 852:	09 94       	ijmp

00000854 <_exit>:
 854:	f8 94       	cli

00000856 <__stop_program>:
 856:	ff cf       	rjmp	.-2      	; 0x856 <__stop_program>
